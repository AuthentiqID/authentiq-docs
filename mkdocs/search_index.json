{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nIf you are reading this you\nre probably curious how to integrate \nAuthentiq\n on your website. \n\n\nThe easiest to get started is to include the \nAuthentiqJS snippet\n on your page as described below. Alternatively you can point your \nfavourite OAuth 2.0 or OpenID Connect client library\n at Authentiq.\n\n\nAs we run Authentiq Connect as a Service, there is no need to install or run anything locally.\n\n\nSoon you will also be able to \ninstall the Authentiq Connect daemon locally\n, from source, or using pre-built packages for Debian 7.0, 8.0 and Ubuntu 15.04.\n\n\nShow me the code!\n\n\nRegister an app\n and paste the following code into an HTML page at the point where you want render a Sign in button. Replace the placeholder with the Client ID of your new application.\n\n\nscript src=\nhttps://developers.authentiq.io/js/authentiq.js\n\n        class=\nauthentiq-snippet\n\n        data-client-id=\nYOUR-CLIENT-ID\n\n        data-button=\nyes\n\n\n/script\n\n\n\n\nYou can view a \nlive demo\n of the above code wrapped in some basic HTML.\n\n\nMake sure to register the app as a \nclient-side or hybrid\n application, and to paste the exact URL your example is loaded on (e.g. \nhttp://localhost:8000/authentiq.html\n) in the \nRedirect URI\n field. This is an essential security measure for the Authentiq Connect server. An easy way to serve local files is by executing \npython3 -m http.server\n in the same directory.\n\n\nNext steps\n\n\nGreat, let\ns dive a bit deeper. Some suggestions:\n\n\n\n\nCheck the different \nidentity claims\n you can request from a user, and add them to the example including a \ndata-scope\n attribute.\n\n\nPlay with some of the other \nscript tag attributes\n, such as \ndata-display\n, \ndata-sign-in-text\n, \ndata-sign-out-text\n and \ndata-sign-out-claim\n.\n\n\nAdd a \nprofile\n \nevent handler\n to the example and print the identity claims it receives.\n\n\n\n\nTo develop a more complete application, \n\n\n\n\nCheck the \nthird-party integrations\n and browse the \nexample code\n. \n\n\nUnderstand whether you are building a \nclient-side, server-side or hybrid application\n.\n\n\nFine tune your application\ns configuration, attach a title and a logo, in the \nclient console\n.\n\n\nFinally, \nlet us know\n how it went or \nhelp fix a documentation error\n!\n\n\n\n\nProtocol\n\n\nTBD\n\n\nConcepts\n\n\nThis section explains general concepts relating to Authentiq Connect.\n\n\nAuthentiq ID\n\n\nThe Authentiq mobile app (currently on iOS) is the key to the end-user\ns privacy. The app creates and maintains a mobile identity\nAuthentiq ID\nthat can be used to authenticate. An Authentiq ID can be seen as a secure cryptographic passport that can hold various bits of profile information. Some of the information, like phone number and email address, are verified by Authentiq so that the website doesn\nt have to. The user still decides what to share and with whom.\n\n\nApplication types\n\n\nTBD\n\n\nIntegration types\n\n\nThe following table highlights key differences between the protocol variants.\n\n\n\n\n\n\n\n\nFeature\n\n\nAuthentiq Connect\n\n\nOpenID Connect\n\n\nOAuth 2.0\n\n\n\n\n\n\n\n\n\n\nAuthorization code grant\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nImplicit grant\n\n\nYes\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nID Token\n support\n\n\nYes\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nRich authentication UX\n\n\nStandard\n\n\nWith some effort\n\n\nLess\n\n\n\n\n\n\nNeed to fetch user information with separate HTTP request\n\n\nNo\n\n\nNo\n\n\nYes\n\n\n\n\n\n\nEnd-to-end verification of user information\n\n\nYes\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nEnd-to-end encryption of user information\n\n\nSoon\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nAuthentiq Connect Provider needs to be trusted by client\n\n\nNo\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nAuthentiq Connect Provider needs to persist user information\n\n\nNo\n\n\nDepends\n\n\nYes\n\n\n\n\n\n\n\n\nScopes\n\n\nAuthentiq Connect leverages OAuth 2.0 scopes to specify what sections of a user\ns profile are being requested, inheriting \nscopes from OIDC\n where possible.\n\n\nIdentity claims\n\n\nUsing scopes, a client application can request the following \nidentity claims\n from a user.\n\n\n\n\n\n\n\n\nScope name\n\n\nDescription\n\n\nClaims included\n\n\nCan be marked required?\n\n\nCan be signed?\n\n\n\n\n\n\n\n\n\n\nname\n\n\nA user\ns full name.\n\n\nname\n, \ngiven_name\n, \nfamily_name\n, \nmiddle_name\n, \nnickname\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nemail\n\n\nA user\ns (verified) email address\n\n\nemail\n, \nemail_verified\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nphone\n\n\nA user\ns (verified) phone number\n\n\nphone_number\n, \nphone_number_verified\n\n\nYes\n\n\nYes\n\n\n\n\n\n\naddress\n\n\nA user\ns home address\n\n\naddress\n\n\nYes\n\n\nNo\n\n\n\n\n\n\nlocation\n\n\nA user\ns current location.\n\n\naq:location\n\n\nYes\n\n\nNo\n\n\n\n\n\n\n\n\nFollowing OIDC, scopes are \noptional\n by default, leaving the choice of providing any of the details to the end-user, who will be able to opt out of the requested scopes on the Authentiq ID consent screen. The client application is then responsible to deal with the missing information.\n\n\nAlternatively, Authentiq allows you to mark certain scopes as \nrequired\n and/or \nrequiring a signature\n from a trusted issuer.\n\n\nRequired claims\n\n\nIdentity scopes can be marked as being \nrequired\n by appending \n~r\n to the scope label, for instance \nemail~r\n or \nphone~r\n. Doing so will prevent a user from opting out of the section when signing in from the Authentiq ID mobile app. We recommend using this flag sparingly and instead letting users opt-in to the information they share with you.\n\n\nSigned claims\n\n\nScopes can also be marked to \nrequire a signature\n from an externally trusted party. In fact, Authentiq is acting as a signature provider for the email and phone claims, handling the confirmation of email addresses and phone number using a one-time verification code sent by email or text message.\n\n\nDevelopers will be able to register their own signature providers soon. \n\n\nFunctional scopes\n\n\nAuthentiq Connect also uses scopes to indicate \nfunctional\n preferences. \n\n\n\n\n\n\n\n\nLabel\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naq:push\n\n\nWhether or not to offer \nOne click sign-in\n to the user. With this convenient feature enabled, the end-user will be given the option to skip the QR code for subsequent logins using the same browser.\n\n\n\n\n\n\n\n\nErrors\n\n\nWhen something goes wrong, Authentiq Connect redirects back to the client application as stipulated by OAuth 2.0, so that the error can be handled in the domain and using the UX of the client application. The Authentiq Connect SDK emits these errors in turn as an \nerror\n event. Below is a gathering of all possible error codes and their descriptions.\n\n\n\n\n\n\n\n\nError\n\n\nOrigin\n\n\nResource\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninteraction_required\n\n\nOIDC\n\n\nAuthorize\n\n\nThe Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction.\n\n\n\n\n\n\nlogin_required\n\n\nOIDC\n\n\nAuthorize\n\n\nThe Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication.\n\n\n\n\n\n\naccount_selection_required\n\n\nOIDC\n\n\nAuthorize\n\n\nThe End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.\n\n\n\n\n\n\nconsent_required\n\n\nOIDC\n\n\nAuthorize\n\n\nThe Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent.\n\n\n\n\n\n\ninvalid_request_uri\n\n\nOIDC\n\n\nAuthorize\n\n\nThe request_uri in the Authorization Request returns an error or contains invalid data.\n\n\n\n\n\n\ninvalid_request_object\n\n\nOIDC\n\n\nAuthorize\n\n\nThe request parameter contains an invalid Request Object.\n\n\n\n\n\n\nrequest_not_supported\n\n\nOIDC\n\n\nAuthorize\n\n\nThe OP does not support use of the request parameter defined in Section 6.\n\n\n\n\n\n\nrequest_uri_not_supported\n\n\nOIDC\n\n\nAuthorize\n\n\nThe OP does not support use of the request_uri parameter defined in Section 6.\n\n\n\n\n\n\nregistration_not_supported\n\n\nOIDC\n\n\nAuthorize\n\n\nThe OP does not support use of the registration parameter defined in Section 7.2.1.\n\n\n\n\n\n\ninvalid_request\n\n\nOAuth2\n\n\nAuthorize, Token\n\n\nThe request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.\n\n\n\n\n\n\nunauthorized_client\n\n\nOAuth2\n\n\nAuthorize, Token\n\n\nThe client is not authorized to request an authorization code using this method.\n\n\n\n\n\n\naccess_denied\n\n\nOAuth2\n\n\nAuthorize, Token\n\n\nThe resource owner or authorization server denied the request.\n\n\n\n\n\n\nunsupported_response_type\n\n\nOAuth2\n\n\nAuthorize, Token\n\n\nThe authorization server does not support obtaining an authorization code using this method.\n\n\n\n\n\n\ninvalid_scope\n\n\nOAuth2\n\n\nAuthorize, Token\n\n\nThe requested scope is invalid, unknown, or malformed.\n\n\n\n\n\n\nserver_error\n\n\nOAuth2\n\n\nAuthorize, Token\n\n\nThe authorization server encountered an unexpected condition that prevented it from fulfilling the request.\n\n\n\n\n\n\ntemporarily_unavailable\n\n\nOAuth2\n\n\nAuthorize, Token\n\n\nThe authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.\n\n\n\n\n\n\ninvalid_request\n\n\nBearer\n\n\nUserInfo\n\n\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.\n\n\n\n\n\n\ninvalid_token\n\n\nBearer\n\n\nUserInfo\n\n\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.\n\n\n\n\n\n\ninsufficient_scope\n\n\nBearer\n\n\nUserInfo\n\n\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \nscope\n attribute with the scope necessary to access the protected resource.\n\n\n\n\n\n\n\n\nTerminology\n\n\nSome terminology used in this documentation.\n\n\n\n\nAuthentiq ID\n\n\nThe name of the Authentiq mobile app that manages the mobile cryptographic identity of the end-user. Authentiq ID is currently available on iOS, but will also be ported to Android.\n\n\nAuthentiqJS\n\n\nThe name of the Authentiq native JavaScript snippet.\n\n\nAuthentiq Connect\n\n\nThe authentication protocol defined by Authentiq.\n\n\nAuthentiq Connect Provider\n\n\nThe daemon that serves the Authentiq Connect protocol, acting as a bridge between website and app. The provider is packaged as \nauthentiqd\n in the context of SysV-style init scripts.\n\n\nAuthentiq Connect SDK\n\n\nThe combination of the hosted (or installable) Authentiq Connect Provider and AuthentiqJS.\n\n\nThird-party Integration\n\n\nThe combination of the hosted (or installable) Authentiq Connect Provider and a third-party OAuth 2.0 or OIDC client library.\n\n\nApp, Client, or Relying Party\n\n\nThe client website or application that end-users authenticate to. Client and Relying Party are used interchangeably in the OpenID Connect specification.\n\n\nCertificate Authority List\n\n\nA public list of signature authorities that allows a Relying Party to verify that a certain identity claim was signed by an active trusted party.\n\n\nCertificate Revocation List\n\n\nA public list of unique end-user and (hashed) device identifiers that can be used by a Relying Party to verify that a user is still active and their device hasn\nt been revoked. \n\n\n\n\nSupport\n\n\nNothing is perfect right from the start, but we\nre here to help and we\nre listening too! These are the best ways to contact us\n\n\nChat\n\n\nJoin Authentiq on IRC at \n#authentiq@freenode.net\n to discuss general topics, or to let us know your joys or pains with Authentiq. We\nre quite an accessible bunch of friends.\n\n\nEmail\n\n\nYou can contact us via email at \nsupport@authentiq.com\n.\n\n\nTweet\n\n\nSometimes a simple \ntweet\n is best.\n\n\nHack\n\n\nDiscuss bugs or new features on \nGitHub\n.\n\n\nWrite\n\n\nSpotted an error in this documentation? Let us know or fork \nthis repository\n straight away and press Edit.\n\n\nSecurity\n\n\nPlease report security issues by email \nsecurity@authentiq.com\n.\n\n\nWe\nll set up a GPG key for the security team soon.", 
            "title": "Overview"
        }, 
        {
            "location": "/#introduction", 
            "text": "If you are reading this you re probably curious how to integrate  Authentiq  on your website.   The easiest to get started is to include the  AuthentiqJS snippet  on your page as described below. Alternatively you can point your  favourite OAuth 2.0 or OpenID Connect client library  at Authentiq.  As we run Authentiq Connect as a Service, there is no need to install or run anything locally.  Soon you will also be able to  install the Authentiq Connect daemon locally , from source, or using pre-built packages for Debian 7.0, 8.0 and Ubuntu 15.04.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#show-me-the-code", 
            "text": "Register an app  and paste the following code into an HTML page at the point where you want render a Sign in button. Replace the placeholder with the Client ID of your new application.  script src= https://developers.authentiq.io/js/authentiq.js \n        class= authentiq-snippet \n        data-client-id= YOUR-CLIENT-ID \n        data-button= yes  /script  You can view a  live demo  of the above code wrapped in some basic HTML.  Make sure to register the app as a  client-side or hybrid  application, and to paste the exact URL your example is loaded on (e.g.  http://localhost:8000/authentiq.html ) in the  Redirect URI  field. This is an essential security measure for the Authentiq Connect server. An easy way to serve local files is by executing  python3 -m http.server  in the same directory.", 
            "title": "Show me the code!"
        }, 
        {
            "location": "/#next-steps", 
            "text": "Great, let s dive a bit deeper. Some suggestions:   Check the different  identity claims  you can request from a user, and add them to the example including a  data-scope  attribute.  Play with some of the other  script tag attributes , such as  data-display ,  data-sign-in-text ,  data-sign-out-text  and  data-sign-out-claim .  Add a  profile   event handler  to the example and print the identity claims it receives.   To develop a more complete application,    Check the  third-party integrations  and browse the  example code .   Understand whether you are building a  client-side, server-side or hybrid application .  Fine tune your application s configuration, attach a title and a logo, in the  client console .  Finally,  let us know  how it went or  help fix a documentation error !", 
            "title": "Next steps"
        }, 
        {
            "location": "/#protocol", 
            "text": "TBD", 
            "title": "Protocol"
        }, 
        {
            "location": "/#concepts", 
            "text": "This section explains general concepts relating to Authentiq Connect.", 
            "title": "Concepts"
        }, 
        {
            "location": "/#authentiq-id", 
            "text": "The Authentiq mobile app (currently on iOS) is the key to the end-user s privacy. The app creates and maintains a mobile identity Authentiq ID that can be used to authenticate. An Authentiq ID can be seen as a secure cryptographic passport that can hold various bits of profile information. Some of the information, like phone number and email address, are verified by Authentiq so that the website doesn t have to. The user still decides what to share and with whom.", 
            "title": "Authentiq ID"
        }, 
        {
            "location": "/#application-types", 
            "text": "TBD", 
            "title": "Application types"
        }, 
        {
            "location": "/#integration-types", 
            "text": "The following table highlights key differences between the protocol variants.     Feature  Authentiq Connect  OpenID Connect  OAuth 2.0      Authorization code grant  Yes  Yes  Yes    Implicit grant  Yes  Yes  Yes    ID Token  support  Yes  Yes  No    Rich authentication UX  Standard  With some effort  Less    Need to fetch user information with separate HTTP request  No  No  Yes    End-to-end verification of user information  Yes  No  No    End-to-end encryption of user information  Soon  No  No    Authentiq Connect Provider needs to be trusted by client  No  Yes  Yes    Authentiq Connect Provider needs to persist user information  No  Depends  Yes", 
            "title": "Integration types"
        }, 
        {
            "location": "/#scopes", 
            "text": "Authentiq Connect leverages OAuth 2.0 scopes to specify what sections of a user s profile are being requested, inheriting  scopes from OIDC  where possible.  Identity claims  Using scopes, a client application can request the following  identity claims  from a user.     Scope name  Description  Claims included  Can be marked required?  Can be signed?      name  A user s full name.  name ,  given_name ,  family_name ,  middle_name ,  nickname  Yes  No    email  A user s (verified) email address  email ,  email_verified  Yes  Yes    phone  A user s (verified) phone number  phone_number ,  phone_number_verified  Yes  Yes    address  A user s home address  address  Yes  No    location  A user s current location.  aq:location  Yes  No     Following OIDC, scopes are  optional  by default, leaving the choice of providing any of the details to the end-user, who will be able to opt out of the requested scopes on the Authentiq ID consent screen. The client application is then responsible to deal with the missing information.  Alternatively, Authentiq allows you to mark certain scopes as  required  and/or  requiring a signature  from a trusted issuer.  Required claims  Identity scopes can be marked as being  required  by appending  ~r  to the scope label, for instance  email~r  or  phone~r . Doing so will prevent a user from opting out of the section when signing in from the Authentiq ID mobile app. We recommend using this flag sparingly and instead letting users opt-in to the information they share with you.  Signed claims  Scopes can also be marked to  require a signature  from an externally trusted party. In fact, Authentiq is acting as a signature provider for the email and phone claims, handling the confirmation of email addresses and phone number using a one-time verification code sent by email or text message.  Developers will be able to register their own signature providers soon.   Functional scopes  Authentiq Connect also uses scopes to indicate  functional  preferences.      Label  Description      aq:push  Whether or not to offer  One click sign-in  to the user. With this convenient feature enabled, the end-user will be given the option to skip the QR code for subsequent logins using the same browser.", 
            "title": "Scopes"
        }, 
        {
            "location": "/#errors", 
            "text": "When something goes wrong, Authentiq Connect redirects back to the client application as stipulated by OAuth 2.0, so that the error can be handled in the domain and using the UX of the client application. The Authentiq Connect SDK emits these errors in turn as an  error  event. Below is a gathering of all possible error codes and their descriptions.     Error  Origin  Resource  Description      interaction_required  OIDC  Authorize  The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction.    login_required  OIDC  Authorize  The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication.    account_selection_required  OIDC  Authorize  The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.    consent_required  OIDC  Authorize  The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent.    invalid_request_uri  OIDC  Authorize  The request_uri in the Authorization Request returns an error or contains invalid data.    invalid_request_object  OIDC  Authorize  The request parameter contains an invalid Request Object.    request_not_supported  OIDC  Authorize  The OP does not support use of the request parameter defined in Section 6.    request_uri_not_supported  OIDC  Authorize  The OP does not support use of the request_uri parameter defined in Section 6.    registration_not_supported  OIDC  Authorize  The OP does not support use of the registration parameter defined in Section 7.2.1.    invalid_request  OAuth2  Authorize, Token  The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.    unauthorized_client  OAuth2  Authorize, Token  The client is not authorized to request an authorization code using this method.    access_denied  OAuth2  Authorize, Token  The resource owner or authorization server denied the request.    unsupported_response_type  OAuth2  Authorize, Token  The authorization server does not support obtaining an authorization code using this method.    invalid_scope  OAuth2  Authorize, Token  The requested scope is invalid, unknown, or malformed.    server_error  OAuth2  Authorize, Token  The authorization server encountered an unexpected condition that prevented it from fulfilling the request.    temporarily_unavailable  OAuth2  Authorize, Token  The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.    invalid_request  Bearer  UserInfo  The request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.    invalid_token  Bearer  UserInfo  The access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.    insufficient_scope  Bearer  UserInfo  The request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the  scope  attribute with the scope necessary to access the protected resource.", 
            "title": "Errors"
        }, 
        {
            "location": "/#terminology", 
            "text": "Some terminology used in this documentation.   Authentiq ID  The name of the Authentiq mobile app that manages the mobile cryptographic identity of the end-user. Authentiq ID is currently available on iOS, but will also be ported to Android.  AuthentiqJS  The name of the Authentiq native JavaScript snippet.  Authentiq Connect  The authentication protocol defined by Authentiq.  Authentiq Connect Provider  The daemon that serves the Authentiq Connect protocol, acting as a bridge between website and app. The provider is packaged as  authentiqd  in the context of SysV-style init scripts.  Authentiq Connect SDK  The combination of the hosted (or installable) Authentiq Connect Provider and AuthentiqJS.  Third-party Integration  The combination of the hosted (or installable) Authentiq Connect Provider and a third-party OAuth 2.0 or OIDC client library.  App, Client, or Relying Party  The client website or application that end-users authenticate to. Client and Relying Party are used interchangeably in the OpenID Connect specification.  Certificate Authority List  A public list of signature authorities that allows a Relying Party to verify that a certain identity claim was signed by an active trusted party.  Certificate Revocation List  A public list of unique end-user and (hashed) device identifiers that can be used by a Relying Party to verify that a user is still active and their device hasn t been revoked.", 
            "title": "Terminology"
        }, 
        {
            "location": "/#support", 
            "text": "Nothing is perfect right from the start, but we re here to help and we re listening too! These are the best ways to contact us", 
            "title": "Support"
        }, 
        {
            "location": "/#chat", 
            "text": "Join Authentiq on IRC at  #authentiq@freenode.net  to discuss general topics, or to let us know your joys or pains with Authentiq. We re quite an accessible bunch of friends.", 
            "title": "Chat"
        }, 
        {
            "location": "/#email", 
            "text": "You can contact us via email at  support@authentiq.com .", 
            "title": "Email"
        }, 
        {
            "location": "/#tweet", 
            "text": "Sometimes a simple  tweet  is best.", 
            "title": "Tweet"
        }, 
        {
            "location": "/#hack", 
            "text": "Discuss bugs or new features on  GitHub .", 
            "title": "Hack"
        }, 
        {
            "location": "/#write", 
            "text": "Spotted an error in this documentation? Let us know or fork  this repository  straight away and press Edit.", 
            "title": "Write"
        }, 
        {
            "location": "/#security", 
            "text": "Please report security issues by email  security@authentiq.com .  We ll set up a GPG key for the security team soon.", 
            "title": "Security"
        }, 
        {
            "location": "/integration/", 
            "text": "Introduction\n\n\n[TBD]\n\n\nThis page explains how to allow your users to sign in with Authentiq ID on your website in minutes. It shows how to \nuse AuthentiqJS with both client and server side applications\n, but also covers how to \nuse third-party OAuth 2.0 frameworks with Authentiq Connect\n.\n\n\nAuthentiq Connect is compatible with both \nOAuth 2.0\n and \nOpenID Connect 1.0 (OIDC)\n, and as such it should feel familiar to anyone having implemented an OAuth 2.0 authorization flow before. In case your application already accepts users from other OAuth 2.0 identity providers (such as Google, Facebook, \n), it should be easy to enable Authentiq ID as another source of verified users using your existing OAuth 2.0 client implementation.\n\n\nAlternatively, our \nnative Authentiq Connect SDK\n allows you to implement a rich authentication experience in minutes. We recommend this option if you are looking to enhance your registration and sign-in flows, or want to add strong passwordless two-factor authentication to your website.\n\n\nThere are a few important differences to consider when evaluating integration options.\n\n\nOur native Authentiq Connect SDK is easy to use and leverages features of OpenID Connect to obtain a rich authentication experience. But our protocol also works with many of the great third-party OAuth 2.0 client libraries out there already. Deciding what works best for you depends heavily on your situation. In practice, generic OAuth 2.0 libraries tend to work well, but will be less optimized in terms of performance and user experience.\n\n\nOpenID Connect is an extention to OAuth 2.0 that standardizes user authentication and forms the basis of Authentiq Connect. \n\n\nRegister a client\n\n\n[TBD]\n\n\nWhether or not your integration is going to be native or third-party, you will need to \nregister your application\n with an Authentiq Connect Provider and obtain a unique client identifier. Use the \nclient_id\n in your preferred OAuth 2.0 client library, or when customizing your AuthentiqJS snippet below. \n\n\nAuthentiqJS\n\n\nIn terms of user experience, the smoothest integration option is to simply include our AuthentiqJS snippet on your page. You can use the snippet configurator to easily generate cusomtized snippet code for your application, or copy and adjust the example snippet below.\n\n\nButton\n\n\n\n  \n\n    \n1. Pick an Authentiq client \n[Sign in first]\n\n  \n\n  \n\n    \n\n      \n\n        \nSelect existing client ID\n\n        \n\n          \nSelect an existing client ID\n\n        \n\n      \n\n      \nCreate new client\n\n    \n\n  \n\n\n\n\n\n\n  \n\n    \n2. Button options\n\n  \n\n  \n\n    \n\n      \n\n        \nDisplay\n\n        \n\n          \n\n            \nModal\n\n            \nPage\n\n            \nPopup\n\n          \n\n        \n\n        \nTheme\n\n        \n\n          \n\n            \nBasic\n\n            \nOrange\n\n            \nGrey\n\n            \nWhite\n\n          \n\n        \n\n      \n\n      \n\n        \nSign in text\n\n        \n\n          \n\n        \n\n        \nSign out text\n\n        \n\n          \n\n        \n\n      \n\n      \n\n      \n\n        \n\n          \n\n          Direct events, will fire any events even before DOM is ready\n        \n\n      \n\n    \n\n  \n\n\n\n\n\n\n  \n\n    Sign in\n  \n\n\n\n\n\n\n\n\nGet code!\n\n\n\n\n\n\n  \n\n    \n\n      \n\n        \n\n        \nGet the code\n\n      \n\n      \n\n        \n1. Copy the script tag in your site \nhead\n.\n\n        \nYou might have to replace the \nPLACEHOLDER_CLIENT_ID\n with your apps' client ID\n\n        \n\n        \n\n        \n2. Copy the button in the position you want it to be displayed.\n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\n\n  \n\n    \n\n      \n\n        \n\n        \nCreate a new client\n\n      \n\n      \n\n        \n\n      \n\n    \n\n  \n\n\n\n\n\nExample\n\n\n    \nscript src=\n//cdn.authentiq.io/authentiq.io/1.0/authentiq.js\n/script\n\n    \nbutton class=\nauthentiq-button\n\n            data-client-id=\n62a90b31-db29-4510-adf4-3d4d7d932d14\n\n            data-provider-uri=\nhttps://connect.authentiq.io/authorize\n\n            data-scopes=\nemail~rs aq:name aq:push\n\n      Sign in with Authentiq ID\n    \n/button\n\n\n\n\nOptions\n\n\nThe following \ndata-*\n attributes are available for the AuthentiqJS \nscript\n and \nbutton\n tags.\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nclient-id\n\n\nYour registered application ID.\n\n\nNone, obtain a unique ID from the \nClient Console\n.\n\n\n\n\n\n\nprovider-uri\n\n\nProvider Authorization URL. Change this for \nself-hosted installs\n.\n\n\nhttps://connect.authentiq.io/authorize\n\n\n\n\n\n\nscope\n\n\nScopes\n to request from user, as a space-separated list. Append \n~r\n to indicate that a scope is required and/or \n~s\n to indicate the scope should have a valid signature from a trusted Authentiq Issuer.\n\n\nThe scopes registered as defaults for the application.\n\n\n\n\n\n\ndisplay\n\n\nAuthorization display mode. Valid choices are \npage\n (full page redirect), \npopup\n (popup window) and \nmodal\n (modal iframe).\n\n\nmodal\n\n\n\n\n\n\nprompt\n\n\nPreferred prompt method in Authentiq ID. Valid choices are \nlogin\n and \nconsent\n. Providing \nconsent\n essentially overrides \nOne click sign-in\n and always prompts user for consent.\n\n\nlogin\n\n\n\n\n\n\nresponse-type\n\n\nOIDC response type. Valid options are \nid_token\n, \ncode\n and \ncode id_token\n. You will want to use \nid_token\n for client-side apps and \ncode id_token\n for server-side or hybrid applications. Please make sure that your app is registered with the correct application type.\n\n\nid_token\n\n\n\n\n\n\nresponse-mode\n\n\nOIDC response mode. Valid options are \nquery\n and \nfragment\n. Can usually be left alone, unless you need need to bypass AuthentiqJS and redirect directly to a server endpoint; in that case manually select \nquery\n.\n\n\nUsually \nfragment\n.\n\n\n\n\n\n\nredirect-uri\n\n\nOAuth 2.0 redirect URL. Unless you need to redirect to a server side endpoint you can leave this alone and let AuthentiqJS use the URL of the current page.\n\n\nThe current page, from \nwindow.href.location\n.\n\n\n\n\n\n\nstate\n\n\nClient application state to prevent \ncross site request forgeries (XSRF)\n. To support \nolder browsers\n it is possible to pass in a server generated nonce.\n\n\n32 bytes from \ncrypto.getRandomValues()\n.\n\n\n\n\n\n\nclient-response-uri\n\n\nURL to POST the received authorization response to for server side validation or processing. Method should return 200 or 400. This parameter is only used when \nresponse_mode=fragment\n, since otherwise .\n\n\nNone\n\n\n\n\n\n\n\n\nEvents\n\n\nAuthentiqJS allows you to subscribe to a number of events during the authentication flow.\n\n\n\n\n\n\n\n\nEvent name\n\n\nDescription\n\n\nCallback parameters\n\n\n\n\n\n\n\n\n\n\nauthorized\n\n\nEmitted after successful authentication.\n\n\nAn object containing the URL fragments the provider sent upon successful authentication, e.g. one or more of \ncode\n, \nid_token\n, \naccess_token\n, \nexpires_in\n, \nexpires_at\n and \nstate\n.\n\n\n\n\n\n\nauthorized:code\n\n\nEmitted after successful authentication when the response included an authorization code as is the case with response type \ncode\n or \ncode id_token\n.\n\n\nThe authorization \ncode\n received from the provider.\n\n\n\n\n\n\nauthorized:access_token\n\n\nEmitted after successful authentication when the response included an access token as is the case with response type \ntoken\n or \ntoken id_token\n.\n\n\nThe \naccess_token\n and \nexpires_in\n values returned by the provider.\n\n\n\n\n\n\nauthorized:id_token\n\n\nEmitted after successful authentication when the response included an ID Token as is the case with response type \nid_token\n or \ncode id_token\n.\n\n\nThe un-decoded \nid_token\n as a JWT.\n\n\n\n\n\n\nprofile\n\n\nEmitted after successful authentication when the response included an ID Token the token was validated and decoded successfully.\n\n\nThe decoded \nid_token\n object.\n\n\n\n\n\n\nconcluded\n\n\nEmitted when the authentication session was concluded by the user signing out on the website, or terminating the session from the Authentiq ID mobile app.\n\n\nN/A\n\n\n\n\n\n\nerror\n\n\nEmitted when an error occurs. Possible errors are liste. Note that depending on the \nshow_errors\n option\n the error may have already been shown to the user by the provider. In this case, you may still find this event useful to silently gather error statistics.\n\n\nThe \nerror\n code and \nerror_description\n as defined by the OAuth 2.0, OIDC or Bearer Token RFCs.\n\n\n\n\n\n\n\n\nExample\n\n\nTo subscribe to an event, use a pattern like the following.\n\n\nQ: Is there no way to run this normally (i.e. not after DOMContentLoaded)? \n\n\nscript\n\n  document.addEventListener('DOMContentLoaded', function() {\n\n    authentiq.subscribe('profile', function(profile) {\n\n      // Profile\n      // {\n      //   \nscope\n: \nemail aq:name\n,\n      //   \nname\n: \nGeorge Orwell\n,\n      //   \ngiven_name\n: \nGeorge\n,\n      //   \nfamily_name\n: \nOrwell\n,\n      //   \nemail\n: \ngeorge@1984.net\n,\n      //   \nemail_verified\n: false\n      // }\n\n    });\n\n    authentiq.subscribe('error', function(error) {\n\n      // Error\n      // {\n      //   \nerror\n: \nclient_error\n,\n      //   \nerror_description\n: \nInvalid state parameter\n\n      // }\n\n    });\n\n  }, false);\n\n/script\n\n\n\n\nYou can see how events work in another \nlive example\n.\n\n\nThe code that subscribes to the events must be placed before the AuthentiqJS script tag itself.\n\n\nServer side processing\n\n\nIf the response mode is set to \nfragment\n (recommended), then \nclient_response_uri\n can be used to still proxy the authorization response to your backend servers, as if you had specified \nquery\n response mode. The backend server may do one or more of the following tasks:  \n\n\n\n\nValidate the ID Token, if present, using cryptographic functions available on the server and return a 400 response in case of a validation error.\n\n\nConsume the authorization code, if present, and exchange it for an access and/or refresh token at the Authentiq Connect token endpoint.\n\n\n\n\nThe endpoint should return one of the following status codes. \n\n\n\n\n\n\n\n\nHTTP status code\n\n\nAction\n\n\n\n\n\n\n\n\n\n\n200\n\n\nToken validated; the success callback will be called.\n\n\n\n\n\n\n400\n\n\nToken error; a message will be displayed and the error callback invoked.\n\n\n\n\n\n\n\n\nThird-party integrations\n\n\nTBD\n\n\n\n\n\n\n\n\nTypical option\n\n\nWhat to fill in\n\n\n\n\n\n\n\n\n\n\nclient_id\n\n\nThe client_id you obtained above.\n\n\n\n\n\n\nscope\n\n\nSpace delimited list of \nAuthentiq Connect scopes\n.\n\n\n\n\n\n\nredirect_uri\n\n\nThe URL in \nyour\n application that the Provider should redirect to after authenticating a user.\n\n\n\n\n\n\nauthorize_uri\n\n\nhttps://connect.authentiq.io/authorize\n\n\n\n\n\n\ntoken_uri\n\n\nhttps://connect.authentiq.io/token\n\n\n\n\n\n\nuserinfo_uri\n\n\nhttps://connect.authentiq.io/userinfo\n\n\n\n\n\n\n\n\nHelloJS\n\n\nThere is a \nfork of HelloJS\n that includes an \nAuthentiq Connect plugin\n. HelloJS abstracts away the implementation differences between a large number of standard OAuth 2.0 identity providers. We\nll aim to get Authentiq Connect included as a supported provider soon.\n\n\nAngularJS\n\n\nAt least two OAuth 2.0 modules exist for AngularJS, both of which have been tested to work with Authentiq Connect.\n\n\n\n\nOAuth-ng\n \n\n\nAngular-OAuth\n\n\n\n\nFlask\n\n\nThere are several authentication extensions for Flask\n [TBD]\n\n\nOther integrations\n\n\nAs support for OpenID Connect increases, we expect to see more and more sites that will allow administrators to configure external OIDC identity provider for user authentication, vastly improving the ecosystem for Authentiq ID integrations as well. We already see companies like Amazon and SalesForce making this possible.   \n\n\nAmazon AWS\n\n\nAmazon allows an administrator to configure an external OpenID Connect identity provider as a source for their \nAWS\n console. We\nre planning to supporting this integration at a later stage so that teams will be able to sign in to AWS using their Authentiq ID. \n\n\nAmazon Cognito\n\n\nAmazon allows mobile app developers to configure \nCognito\n with external OpenID Connect identity providers, enabling an app to authenticate users from social networks and a variety of sources. We\nre planning to supporting this integration at a later stage so that mobile app developers will be able to register and authenticate users by their Authentiq ID. \n\n\nSalesForce\n\n\nSalesForce\n allows an administrator configure up an external OpenID Connect identity provider as a source for company employees. We\nre planning to supporting this integration at a later stage so that companies will be able to let their employees sign into SalesForce using their Authentiq ID.\n\n\n\n  .progress-bar-anim {\n    -webkit-transition: width 2.6s ease;\n         -o-transition: width 2.6s ease;\n            transition: width 2.6s ease;\n  }\n\n  #authentiq.authentiq-button {\n    font-family: Montserrat,\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n  }\n\n\n\n\n\n  (function(aq, $){\n    // Whole-script strict mode syntax\n    'use strict';\n\n    function generate_button() {\n      var $button = $('#authentiq'),\n          opts = {},\n          button, key, val, text;\n\n      text = $('[data-authentiq-key=\"sign_in_text\"]').val() || 'Sign in';\n\n      $button.replaceWith('<button id=\"authentiq\" class=\"authentiq-button\">' + text + '</button>');\n      $button = $('#authentiq');\n\n      // $button.removeData('authentiq-button');\n\n      $('[data-authentiq-key]').each(function(index){\n        key = $(this).data('authentiq-key');\n        val = $(this).val();\n\n        if (val != '') {\n          opts[key] = val;\n        }\n      });\n\n      button = new authentiq.Button($button[0], opts);\n    }\n\n    function fetch_clients(callback) {\n      var token = JSON.parse(localStorage['ngStorage-authentiq.access_token'] || '{}');\n      if (typeof token.access_token !== 'undefined' && !!token.expires_at && new Date(token.expires_at) > new Date()) {\n\n        var base_url = authentiq._defaults.provider.base_url || 'https://connect.authentiq.io';\n\n        $.ajax({\n          url: base_url + '/client',\n          headers: {\n            'Authorization': token.token_type + ' ' + token.access_token\n          },\n          dataType: 'json'\n        })\n        .done(function(data) {\n          var select = $('#existing-client-id');\n\n          // clear old entries\n          select.html('');\n\n          if (data.length > 0) {\n            $.each(data, function(key, client) {\n              select.append(\n                            $('<option></option>')\n                              .attr('value', client.client_id)\n                              .text(client.client_name));\n            });\n\n            select.prop('disabled', false);\n          } else {\n            select.append(\n                            $('<option></option>')\n                              .attr('value', 'PLACEHOLDER_CLIENT_ID')\n                              .text('No clients found'));\n          }\n\n          if (typeof callback !== 'undefined') {\n            callback();\n          }\n        })\n        .fail(function() {\n          console.info('Clients can\\'t be loaded');\n        });\n      }\n    }\n\n    function console_iframe_loaded() {\n\n      var self = $('#add-client');\n      var iframe = self.find('iframe').contents();\n      var app = iframe.find('#app');\n      self.find('iframe').css('height', app.height());\n\n      app.find('.page-header').hide();\n\n      iframe.find('.progress').hide().find('.progress-bar').width('0%');\n      app.show();\n\n      app.on('click', '#save-button', function(){\n        app.hide();\n        iframe.find('.progress').show().find('.progress-bar').addClass('progress-bar-anim').width('100%');\n        self.find('iframe').css('height', '50px');\n\n        // wait a bit for\n        setTimeout(function() {\n          self.modal('hide');\n\n          self.find('.progress').remove();\n          self.find('.modal-body').children().show();\n\n          fetch_clients(function(){\n            $('#existing-client-id option:last-child').attr('selected', 'selected');\n          });\n        }, 3000);\n      });\n\n      app.on('click', '#cancel-button', function(){\n        self.modal('hide');\n      });\n    };\n    aq.console_iframe_loaded = console_iframe_loaded;\n\n    authentiq.subscribe('profile', function(profile) {\n      $('#add-client-button').removeClass('disabled');\n\n      // redirect iframe to add view\n      $('#add-client iframe')[0].contentWindow.location.hash = '/clients/add';\n\n      fetch_clients();\n    });\n\n    authentiq.subscribe('concluded', function() {\n      $('#existing-client-id').prop('disabled', true);\n      $('#add-client-button').addClass('disabled');\n    });\n\n    $(function() {\n      if (!authentiq.Provider.isSignedIn()) {\n        $('#existing-client-id').prop('disabled', true);\n      }\n\n      $('[data-authentiq-key]').on('change', function(){\n        // handle checkbox options\n        if ($(this).is(':checkbox')) {\n          $(this).val($(this).is(':checked') ? '1' : '');\n        }\n\n        generate_button();\n      });\n\n      generate_button();\n\n\n      $('#add-client')\n        .on('show.bs.modal', function(e) {\n          console_iframe_loaded();\n        })  \n\n        .on('hidden.bs.modal', function(e) {\n          $(this).find('iframe')[0].contentWindow.location.hash = '/clients/add';\n        });\n\n      $('#get-code-modal').on('show.bs.modal', function(e) {\n        var button_opts = {}, script_opts = {},\n          key, val, opt, code = '', button_text;\n\n        $('[data-authentiq-key]').each(function(index){\n          key = $(this).data('authentiq-key');\n          val = $(this).val();\n\n          if (val != '') {\n            if ($(this).attr('data-script-opt')) {\n              script_opts[key] = val;\n            } else {\n              button_opts[key] = val;\n            }\n          };\n        });\n\n        for (opt in script_opts) {\n          code += ' data-' + opt.split('_').join('-') + '=\"' + script_opts[opt] + '\"';\n        }\n\n        $('#script-snippet').html('&lt;script src=\"authentiq-js/authentiq.js\"' + code +\n          '&gt;&lt;/script&gt;');\n\n        code = '';\n        for (opt in button_opts) {\n          code += ' data-' + opt.split('_').join('-') + '=\"' + button_opts[opt] + '\"';\n        }\n\n        button_text = $('[data-authentiq-key=\"sign_in_text\"]').val() || 'Sign in';\n\n        $('#button-snippet').html('&lt;button' + code +\n          '&gt;' + button_text + '&lt;/button&gt;');\n\n        // $(this).find('.modal-content #script-snippet').html('ds');\n      });\n\n      // $('#add-client-button').trigger('click');\n    });\n  })(window.authentiq = window.authentiq || {}, jQuery);", 
            "title": "Integration"
        }, 
        {
            "location": "/integration/#introduction", 
            "text": "[TBD]  This page explains how to allow your users to sign in with Authentiq ID on your website in minutes. It shows how to  use AuthentiqJS with both client and server side applications , but also covers how to  use third-party OAuth 2.0 frameworks with Authentiq Connect .  Authentiq Connect is compatible with both  OAuth 2.0  and  OpenID Connect 1.0 (OIDC) , and as such it should feel familiar to anyone having implemented an OAuth 2.0 authorization flow before. In case your application already accepts users from other OAuth 2.0 identity providers (such as Google, Facebook,  ), it should be easy to enable Authentiq ID as another source of verified users using your existing OAuth 2.0 client implementation.  Alternatively, our  native Authentiq Connect SDK  allows you to implement a rich authentication experience in minutes. We recommend this option if you are looking to enhance your registration and sign-in flows, or want to add strong passwordless two-factor authentication to your website.  There are a few important differences to consider when evaluating integration options.  Our native Authentiq Connect SDK is easy to use and leverages features of OpenID Connect to obtain a rich authentication experience. But our protocol also works with many of the great third-party OAuth 2.0 client libraries out there already. Deciding what works best for you depends heavily on your situation. In practice, generic OAuth 2.0 libraries tend to work well, but will be less optimized in terms of performance and user experience.  OpenID Connect is an extention to OAuth 2.0 that standardizes user authentication and forms the basis of Authentiq Connect.", 
            "title": "Introduction"
        }, 
        {
            "location": "/integration/#register-a-client", 
            "text": "[TBD]  Whether or not your integration is going to be native or third-party, you will need to  register your application  with an Authentiq Connect Provider and obtain a unique client identifier. Use the  client_id  in your preferred OAuth 2.0 client library, or when customizing your AuthentiqJS snippet below.", 
            "title": "Register a client"
        }, 
        {
            "location": "/integration/#authentiqjs", 
            "text": "In terms of user experience, the smoothest integration option is to simply include our AuthentiqJS snippet on your page. You can use the snippet configurator to easily generate cusomtized snippet code for your application, or copy and adjust the example snippet below.", 
            "title": "AuthentiqJS"
        }, 
        {
            "location": "/integration/#button", 
            "text": "1. Pick an Authentiq client  [Sign in first] \n   \n   \n     \n       \n         Select existing client ID \n         \n           Select an existing client ID \n         \n       \n       Create new client \n     \n     \n   \n     2. Button options \n   \n   \n     \n       \n         Display \n         \n           \n             Modal \n             Page \n             Popup \n           \n         \n         Theme \n         \n           \n             Basic \n             Orange \n             Grey \n             White \n           \n         \n       \n       \n         Sign in text \n         \n           \n         \n         Sign out text \n         \n           \n         \n       \n       \n       \n         \n           \n          Direct events, will fire any events even before DOM is ready\n         \n       \n     \n     \n   \n    Sign in\n      Get code!   \n   \n     \n       \n         \n         Get the code \n       \n       \n         1. Copy the script tag in your site  head . \n         You might have to replace the  PLACEHOLDER_CLIENT_ID  with your apps' client ID \n         \n         \n         2. Copy the button in the position you want it to be displayed. \n         \n       \n     \n     \n   \n     \n       \n         \n         Create a new client", 
            "title": "Button"
        }, 
        {
            "location": "/integration/#example", 
            "text": "script src= //cdn.authentiq.io/authentiq.io/1.0/authentiq.js /script \n     button class= authentiq-button \n            data-client-id= 62a90b31-db29-4510-adf4-3d4d7d932d14 \n            data-provider-uri= https://connect.authentiq.io/authorize \n            data-scopes= email~rs aq:name aq:push \n      Sign in with Authentiq ID\n     /button", 
            "title": "Example"
        }, 
        {
            "location": "/integration/#options", 
            "text": "The following  data-*  attributes are available for the AuthentiqJS  script  and  button  tags.     Attribute  Description  Default value      client-id  Your registered application ID.  None, obtain a unique ID from the  Client Console .    provider-uri  Provider Authorization URL. Change this for  self-hosted installs .  https://connect.authentiq.io/authorize    scope  Scopes  to request from user, as a space-separated list. Append  ~r  to indicate that a scope is required and/or  ~s  to indicate the scope should have a valid signature from a trusted Authentiq Issuer.  The scopes registered as defaults for the application.    display  Authorization display mode. Valid choices are  page  (full page redirect),  popup  (popup window) and  modal  (modal iframe).  modal    prompt  Preferred prompt method in Authentiq ID. Valid choices are  login  and  consent . Providing  consent  essentially overrides  One click sign-in  and always prompts user for consent.  login    response-type  OIDC response type. Valid options are  id_token ,  code  and  code id_token . You will want to use  id_token  for client-side apps and  code id_token  for server-side or hybrid applications. Please make sure that your app is registered with the correct application type.  id_token    response-mode  OIDC response mode. Valid options are  query  and  fragment . Can usually be left alone, unless you need need to bypass AuthentiqJS and redirect directly to a server endpoint; in that case manually select  query .  Usually  fragment .    redirect-uri  OAuth 2.0 redirect URL. Unless you need to redirect to a server side endpoint you can leave this alone and let AuthentiqJS use the URL of the current page.  The current page, from  window.href.location .    state  Client application state to prevent  cross site request forgeries (XSRF) . To support  older browsers  it is possible to pass in a server generated nonce.  32 bytes from  crypto.getRandomValues() .    client-response-uri  URL to POST the received authorization response to for server side validation or processing. Method should return 200 or 400. This parameter is only used when  response_mode=fragment , since otherwise .  None", 
            "title": "Options"
        }, 
        {
            "location": "/integration/#events", 
            "text": "AuthentiqJS allows you to subscribe to a number of events during the authentication flow.     Event name  Description  Callback parameters      authorized  Emitted after successful authentication.  An object containing the URL fragments the provider sent upon successful authentication, e.g. one or more of  code ,  id_token ,  access_token ,  expires_in ,  expires_at  and  state .    authorized:code  Emitted after successful authentication when the response included an authorization code as is the case with response type  code  or  code id_token .  The authorization  code  received from the provider.    authorized:access_token  Emitted after successful authentication when the response included an access token as is the case with response type  token  or  token id_token .  The  access_token  and  expires_in  values returned by the provider.    authorized:id_token  Emitted after successful authentication when the response included an ID Token as is the case with response type  id_token  or  code id_token .  The un-decoded  id_token  as a JWT.    profile  Emitted after successful authentication when the response included an ID Token the token was validated and decoded successfully.  The decoded  id_token  object.    concluded  Emitted when the authentication session was concluded by the user signing out on the website, or terminating the session from the Authentiq ID mobile app.  N/A    error  Emitted when an error occurs. Possible errors are liste. Note that depending on the  show_errors  option  the error may have already been shown to the user by the provider. In this case, you may still find this event useful to silently gather error statistics.  The  error  code and  error_description  as defined by the OAuth 2.0, OIDC or Bearer Token RFCs.     Example  To subscribe to an event, use a pattern like the following.  Q: Is there no way to run this normally (i.e. not after DOMContentLoaded)?   script \n  document.addEventListener('DOMContentLoaded', function() {\n\n    authentiq.subscribe('profile', function(profile) {\n\n      // Profile\n      // {\n      //    scope :  email aq:name ,\n      //    name :  George Orwell ,\n      //    given_name :  George ,\n      //    family_name :  Orwell ,\n      //    email :  george@1984.net ,\n      //    email_verified : false\n      // }\n\n    });\n\n    authentiq.subscribe('error', function(error) {\n\n      // Error\n      // {\n      //    error :  client_error ,\n      //    error_description :  Invalid state parameter \n      // }\n\n    });\n\n  }, false); /script  You can see how events work in another  live example .  The code that subscribes to the events must be placed before the AuthentiqJS script tag itself.", 
            "title": "Events"
        }, 
        {
            "location": "/integration/#server-side-processing", 
            "text": "If the response mode is set to  fragment  (recommended), then  client_response_uri  can be used to still proxy the authorization response to your backend servers, as if you had specified  query  response mode. The backend server may do one or more of the following tasks:     Validate the ID Token, if present, using cryptographic functions available on the server and return a 400 response in case of a validation error.  Consume the authorization code, if present, and exchange it for an access and/or refresh token at the Authentiq Connect token endpoint.   The endpoint should return one of the following status codes.      HTTP status code  Action      200  Token validated; the success callback will be called.    400  Token error; a message will be displayed and the error callback invoked.", 
            "title": "Server side processing"
        }, 
        {
            "location": "/integration/#third-party-integrations", 
            "text": "TBD     Typical option  What to fill in      client_id  The client_id you obtained above.    scope  Space delimited list of  Authentiq Connect scopes .    redirect_uri  The URL in  your  application that the Provider should redirect to after authenticating a user.    authorize_uri  https://connect.authentiq.io/authorize    token_uri  https://connect.authentiq.io/token    userinfo_uri  https://connect.authentiq.io/userinfo", 
            "title": "Third-party integrations"
        }, 
        {
            "location": "/integration/#hellojs", 
            "text": "There is a  fork of HelloJS  that includes an  Authentiq Connect plugin . HelloJS abstracts away the implementation differences between a large number of standard OAuth 2.0 identity providers. We ll aim to get Authentiq Connect included as a supported provider soon.", 
            "title": "HelloJS"
        }, 
        {
            "location": "/integration/#angularjs", 
            "text": "At least two OAuth 2.0 modules exist for AngularJS, both of which have been tested to work with Authentiq Connect.   OAuth-ng    Angular-OAuth", 
            "title": "AngularJS"
        }, 
        {
            "location": "/integration/#flask", 
            "text": "There are several authentication extensions for Flask  [TBD]", 
            "title": "Flask"
        }, 
        {
            "location": "/integration/#other-integrations", 
            "text": "As support for OpenID Connect increases, we expect to see more and more sites that will allow administrators to configure external OIDC identity provider for user authentication, vastly improving the ecosystem for Authentiq ID integrations as well. We already see companies like Amazon and SalesForce making this possible.", 
            "title": "Other integrations"
        }, 
        {
            "location": "/integration/#amazon-aws", 
            "text": "Amazon allows an administrator to configure an external OpenID Connect identity provider as a source for their  AWS  console. We re planning to supporting this integration at a later stage so that teams will be able to sign in to AWS using their Authentiq ID.", 
            "title": "Amazon AWS"
        }, 
        {
            "location": "/integration/#amazon-cognito", 
            "text": "Amazon allows mobile app developers to configure  Cognito  with external OpenID Connect identity providers, enabling an app to authenticate users from social networks and a variety of sources. We re planning to supporting this integration at a later stage so that mobile app developers will be able to register and authenticate users by their Authentiq ID.", 
            "title": "Amazon Cognito"
        }, 
        {
            "location": "/integration/#salesforce", 
            "text": "SalesForce  allows an administrator configure up an external OpenID Connect identity provider as a source for company employees. We re planning to supporting this integration at a later stage so that companies will be able to let their employees sign into SalesForce using their Authentiq ID.  \n  .progress-bar-anim {\n    -webkit-transition: width 2.6s ease;\n         -o-transition: width 2.6s ease;\n            transition: width 2.6s ease;\n  }\n\n  #authentiq.authentiq-button {\n    font-family: Montserrat,\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n  }  \n  (function(aq, $){\n    // Whole-script strict mode syntax\n    'use strict';\n\n    function generate_button() {\n      var $button = $('#authentiq'),\n          opts = {},\n          button, key, val, text;\n\n      text = $('[data-authentiq-key=\"sign_in_text\"]').val() || 'Sign in';\n\n      $button.replaceWith('<button id=\"authentiq\" class=\"authentiq-button\">' + text + '</button>');\n      $button = $('#authentiq');\n\n      // $button.removeData('authentiq-button');\n\n      $('[data-authentiq-key]').each(function(index){\n        key = $(this).data('authentiq-key');\n        val = $(this).val();\n\n        if (val != '') {\n          opts[key] = val;\n        }\n      });\n\n      button = new authentiq.Button($button[0], opts);\n    }\n\n    function fetch_clients(callback) {\n      var token = JSON.parse(localStorage['ngStorage-authentiq.access_token'] || '{}');\n      if (typeof token.access_token !== 'undefined' && !!token.expires_at && new Date(token.expires_at) > new Date()) {\n\n        var base_url = authentiq._defaults.provider.base_url || 'https://connect.authentiq.io';\n\n        $.ajax({\n          url: base_url + '/client',\n          headers: {\n            'Authorization': token.token_type + ' ' + token.access_token\n          },\n          dataType: 'json'\n        })\n        .done(function(data) {\n          var select = $('#existing-client-id');\n\n          // clear old entries\n          select.html('');\n\n          if (data.length > 0) {\n            $.each(data, function(key, client) {\n              select.append(\n                            $('<option></option>')\n                              .attr('value', client.client_id)\n                              .text(client.client_name));\n            });\n\n            select.prop('disabled', false);\n          } else {\n            select.append(\n                            $('<option></option>')\n                              .attr('value', 'PLACEHOLDER_CLIENT_ID')\n                              .text('No clients found'));\n          }\n\n          if (typeof callback !== 'undefined') {\n            callback();\n          }\n        })\n        .fail(function() {\n          console.info('Clients can\\'t be loaded');\n        });\n      }\n    }\n\n    function console_iframe_loaded() {\n\n      var self = $('#add-client');\n      var iframe = self.find('iframe').contents();\n      var app = iframe.find('#app');\n      self.find('iframe').css('height', app.height());\n\n      app.find('.page-header').hide();\n\n      iframe.find('.progress').hide().find('.progress-bar').width('0%');\n      app.show();\n\n      app.on('click', '#save-button', function(){\n        app.hide();\n        iframe.find('.progress').show().find('.progress-bar').addClass('progress-bar-anim').width('100%');\n        self.find('iframe').css('height', '50px');\n\n        // wait a bit for\n        setTimeout(function() {\n          self.modal('hide');\n\n          self.find('.progress').remove();\n          self.find('.modal-body').children().show();\n\n          fetch_clients(function(){\n            $('#existing-client-id option:last-child').attr('selected', 'selected');\n          });\n        }, 3000);\n      });\n\n      app.on('click', '#cancel-button', function(){\n        self.modal('hide');\n      });\n    };\n    aq.console_iframe_loaded = console_iframe_loaded;\n\n    authentiq.subscribe('profile', function(profile) {\n      $('#add-client-button').removeClass('disabled');\n\n      // redirect iframe to add view\n      $('#add-client iframe')[0].contentWindow.location.hash = '/clients/add';\n\n      fetch_clients();\n    });\n\n    authentiq.subscribe('concluded', function() {\n      $('#existing-client-id').prop('disabled', true);\n      $('#add-client-button').addClass('disabled');\n    });\n\n    $(function() {\n      if (!authentiq.Provider.isSignedIn()) {\n        $('#existing-client-id').prop('disabled', true);\n      }\n\n      $('[data-authentiq-key]').on('change', function(){\n        // handle checkbox options\n        if ($(this).is(':checkbox')) {\n          $(this).val($(this).is(':checked') ? '1' : '');\n        }\n\n        generate_button();\n      });\n\n      generate_button();\n\n\n      $('#add-client')\n        .on('show.bs.modal', function(e) {\n          console_iframe_loaded();\n        })  \n\n        .on('hidden.bs.modal', function(e) {\n          $(this).find('iframe')[0].contentWindow.location.hash = '/clients/add';\n        });\n\n      $('#get-code-modal').on('show.bs.modal', function(e) {\n        var button_opts = {}, script_opts = {},\n          key, val, opt, code = '', button_text;\n\n        $('[data-authentiq-key]').each(function(index){\n          key = $(this).data('authentiq-key');\n          val = $(this).val();\n\n          if (val != '') {\n            if ($(this).attr('data-script-opt')) {\n              script_opts[key] = val;\n            } else {\n              button_opts[key] = val;\n            }\n          };\n        });\n\n        for (opt in script_opts) {\n          code += ' data-' + opt.split('_').join('-') + '=\"' + script_opts[opt] + '\"';\n        }\n\n        $('#script-snippet').html('&lt;script src=\"authentiq-js/authentiq.js\"' + code +\n          '&gt;&lt;/script&gt;');\n\n        code = '';\n        for (opt in button_opts) {\n          code += ' data-' + opt.split('_').join('-') + '=\"' + button_opts[opt] + '\"';\n        }\n\n        button_text = $('[data-authentiq-key=\"sign_in_text\"]').val() || 'Sign in';\n\n        $('#button-snippet').html('&lt;button' + code +\n          '&gt;' + button_text + '&lt;/button&gt;');\n\n        // $(this).find('.modal-content #script-snippet').html('ds');\n      });\n\n      // $('#add-client-button').trigger('click');\n    });\n  })(window.authentiq = window.authentiq || {}, jQuery);", 
            "title": "SalesForce"
        }, 
        {
            "location": "/installation/", 
            "text": "Introduction\n\n\nThere is nothing to install when running Authentiq as a Service. Just register your client application at our hosted authentication service and head over to \nGetting started\n. This page describes how to install Authentiq Connect locally on your own system, in case you prefer that.\n\n\nWe\nre working hard on making Authentiq Connect installable and hence, this page gives a \npreview\n of a local installation but isn\nt supported just yet. \n\n\nInstallation\n\n\nFrom pre-built packages\n\n\nPre-built packages are available at the moment for Debian 7.0, 8.0 and Ubuntu 15.04.\n\n\nDebian \n Ubuntu\n\n\nAdd our repository to your APT sources, as root:\n\n\napt-add-repository\napt-get update\napt-get install authentiq-connect\n\n\n\n\nEdit the configuration file, see \nbelow\n for details about the available configuration options:\n\n\nvim /etc/authentiq/authentiqd.conf\n\n\n\n\n(Re)start the service:\n\n\n/etc/init.d/authentiqd restart\n\n\n\n\nFrom PyPI\n\n\nYou can also install \nauthentiqd\n using PyPi. We recommend you use a virtual Python environment in this case to not clutter up your system with dependencies.\n\n\npip install authentiq-connect\n\n\n\n\nEdit the configuration file, see \nbelow\n for details about the available configuration options:\n\n\nvim ./etc/authentiqd.conf\n\n\n\n\nBe sure to check out available command line options for the daemon:\n\n\n./bin/authentiq-provider --help\n\nusage: authentiq-provider [-h] [-v] [-D] [--log LOG] [--bind BIND] [--port PORT]\n                       [--insecure] [--schema] [--gunicorn]\n                       [--workers WORKERS] [--name NAME]\n                       [--disable-websockets]\n\nAuthentiq Connect Provider\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         increase verbosity (default: 0)\n  -D, --debug           enable Flask debugging (default: False)\n  --log LOG             write logs to (rotated) file (default: None)\n  --bind BIND           ip to bind to (default: localhost)\n  --port PORT           port to bind to (default: 5000)\n  --insecure            disable JWT signature verification (default: False)\n  --schema              create schema for database (default: False)\n  --gunicorn            run under gunicorn (default: False)\n  --workers WORKERS     start this many worker processes (gunicorn only)\n                        (default: 1)\n  --name NAME           process name to use (gunicorn only) (default: aq-\n                        provider)\n  --disable-websockets  run server without WebSocket support (default: False)\n\n\n\n\nThen start the daemon:\n\n\n./bin/authentiq-provider\n\n\n\n\nFrom source\n\n\nFork and/or clone the Github repository,\n\n\ngit clone github...\n\n\n\n\nand run:\n\n\npython setup.py\n\n\n\n\nor install from source using PyPI:\n\n\npip install -e github...\n\n\n\n\nConfiguration\n\n\n\n\nDescribe configuration file here. \n\n\n\n\nDeployment\n\n\nThe daemon binds to localhost by default on purpose, you should really deploy \nauthentiqd\n behind a caching webserver. We describe how to configure Nginx here, but the configuration can easily be translated to other servers.\n\n\nNginx\n\n\n\n\nDescribe nginx configuration details with well-commented snippet..", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#introduction", 
            "text": "There is nothing to install when running Authentiq as a Service. Just register your client application at our hosted authentication service and head over to  Getting started . This page describes how to install Authentiq Connect locally on your own system, in case you prefer that.  We re working hard on making Authentiq Connect installable and hence, this page gives a  preview  of a local installation but isn t supported just yet.", 
            "title": "Introduction"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#from-pre-built-packages", 
            "text": "Pre-built packages are available at the moment for Debian 7.0, 8.0 and Ubuntu 15.04.  Debian   Ubuntu  Add our repository to your APT sources, as root:  apt-add-repository\napt-get update\napt-get install authentiq-connect  Edit the configuration file, see  below  for details about the available configuration options:  vim /etc/authentiq/authentiqd.conf  (Re)start the service:  /etc/init.d/authentiqd restart", 
            "title": "From pre-built packages"
        }, 
        {
            "location": "/installation/#from-pypi", 
            "text": "You can also install  authentiqd  using PyPi. We recommend you use a virtual Python environment in this case to not clutter up your system with dependencies.  pip install authentiq-connect  Edit the configuration file, see  below  for details about the available configuration options:  vim ./etc/authentiqd.conf  Be sure to check out available command line options for the daemon:  ./bin/authentiq-provider --help\n\nusage: authentiq-provider [-h] [-v] [-D] [--log LOG] [--bind BIND] [--port PORT]\n                       [--insecure] [--schema] [--gunicorn]\n                       [--workers WORKERS] [--name NAME]\n                       [--disable-websockets]\n\nAuthentiq Connect Provider\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         increase verbosity (default: 0)\n  -D, --debug           enable Flask debugging (default: False)\n  --log LOG             write logs to (rotated) file (default: None)\n  --bind BIND           ip to bind to (default: localhost)\n  --port PORT           port to bind to (default: 5000)\n  --insecure            disable JWT signature verification (default: False)\n  --schema              create schema for database (default: False)\n  --gunicorn            run under gunicorn (default: False)\n  --workers WORKERS     start this many worker processes (gunicorn only)\n                        (default: 1)\n  --name NAME           process name to use (gunicorn only) (default: aq-\n                        provider)\n  --disable-websockets  run server without WebSocket support (default: False)  Then start the daemon:  ./bin/authentiq-provider", 
            "title": "From PyPI"
        }, 
        {
            "location": "/installation/#from-source", 
            "text": "Fork and/or clone the Github repository,  git clone github...  and run:  python setup.py  or install from source using PyPI:  pip install -e github...", 
            "title": "From source"
        }, 
        {
            "location": "/installation/#configuration", 
            "text": "Describe configuration file here.", 
            "title": "Configuration"
        }, 
        {
            "location": "/installation/#deployment", 
            "text": "The daemon binds to localhost by default on purpose, you should really deploy  authentiqd  behind a caching webserver. We describe how to configure Nginx here, but the configuration can easily be translated to other servers.", 
            "title": "Deployment"
        }, 
        {
            "location": "/installation/#nginx", 
            "text": "Describe nginx configuration details with well-commented snippet..", 
            "title": "Nginx"
        }, 
        {
            "location": "/api-provider/", 
            "text": "Authentication\n\n\n/authorize\n\n\n/token\n\n\n/userinfo\n\n\nClient Management\n\n\n/client\n\n\n/client/\nclient_id\n\n\nSession Management\n\n\n/authorize/logout\n\n\n/authorize/iframe\n\n\nSessions\n\n\n/session\n\n\n/client/\nclient_id\n/session\n\n\n\n\n\n\n  \n\n    \n\n    \n\n  \n\n\n\n\n\n\n  $(function () {\n    var url = '/swagger/provider.yaml';\n\n    window.swaggerUi = new SwaggerUi({\n      url: url,\n      dom_id: \"swagger-ui-container\",\n      supportedSubmitMethods: [],\n      // supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],\n      onComplete: function(swaggerApi, swaggerUi){\n\n        $('#temp-anchor-links').remove();\n\n        $('body').scrollspy('refresh');\n\n        $('pre code').each(function(i, e) {\n          hljs.highlightBlock(e)\n        });\n\n        addApiKeyAuthorization();\n      },\n      onFailure: function(data) {\n        log(\"Unable to Load SwaggerUI\");\n      },\n      docExpansion: \"none\",\n      apisSorter: \"alpha\",\n      showRequestHeaders: false\n    });\n\n    function addApiKeyAuthorization(){\n      var key;\n      if ('authentiq' in window) {\n        key = window.authentiq.Token.getAuthorizationHeader();\n      }\n\n      if(key && key.trim() != \"\") {\n          var token = new SwaggerClient.ApiKeyAuthorization(\"authorization\", key, \"header\");\n          window.swaggerUi.api.clientAuthorizations.add(\"Authorization\", token);\n          log(\"added key \" + key);\n      }\n    }\n\n    window.swaggerUi.load();\n\n    function log() {\n      if ('console' in window) {\n        console.log.apply(console, arguments);\n      }\n    }\n  });", 
            "title": "Connect"
        }, 
        {
            "location": "/api-provider/#authentication", 
            "text": "", 
            "title": "Authentication"
        }, 
        {
            "location": "/api-provider/#authorize", 
            "text": "", 
            "title": "/authorize"
        }, 
        {
            "location": "/api-provider/#token", 
            "text": "", 
            "title": "/token"
        }, 
        {
            "location": "/api-provider/#userinfo", 
            "text": "", 
            "title": "/userinfo"
        }, 
        {
            "location": "/api-provider/#client-management", 
            "text": "", 
            "title": "Client Management"
        }, 
        {
            "location": "/api-provider/#client", 
            "text": "", 
            "title": "/client"
        }, 
        {
            "location": "/api-provider/#clientclient_id", 
            "text": "", 
            "title": "/client/&lt;client_id&gt;"
        }, 
        {
            "location": "/api-provider/#session-management", 
            "text": "", 
            "title": "Session Management"
        }, 
        {
            "location": "/api-provider/#authorizelogout", 
            "text": "", 
            "title": "/authorize/logout"
        }, 
        {
            "location": "/api-provider/#authorizeiframe", 
            "text": "", 
            "title": "/authorize/iframe"
        }, 
        {
            "location": "/api-provider/#sessions", 
            "text": "", 
            "title": "Sessions"
        }, 
        {
            "location": "/api-provider/#session", 
            "text": "", 
            "title": "/session"
        }, 
        {
            "location": "/api-provider/#clientclient_idsession", 
            "text": "$(function () {\n    var url = '/swagger/provider.yaml';\n\n    window.swaggerUi = new SwaggerUi({\n      url: url,\n      dom_id: \"swagger-ui-container\",\n      supportedSubmitMethods: [],\n      // supportedSubmitMethods: ['get', 'post', 'put', 'delete', 'patch'],\n      onComplete: function(swaggerApi, swaggerUi){\n\n        $('#temp-anchor-links').remove();\n\n        $('body').scrollspy('refresh');\n\n        $('pre code').each(function(i, e) {\n          hljs.highlightBlock(e)\n        });\n\n        addApiKeyAuthorization();\n      },\n      onFailure: function(data) {\n        log(\"Unable to Load SwaggerUI\");\n      },\n      docExpansion: \"none\",\n      apisSorter: \"alpha\",\n      showRequestHeaders: false\n    });\n\n    function addApiKeyAuthorization(){\n      var key;\n      if ('authentiq' in window) {\n        key = window.authentiq.Token.getAuthorizationHeader();\n      }\n\n      if(key && key.trim() != \"\") {\n          var token = new SwaggerClient.ApiKeyAuthorization(\"authorization\", key, \"header\");\n          window.swaggerUi.api.clientAuthorizations.add(\"Authorization\", token);\n          log(\"added key \" + key);\n      }\n    }\n\n    window.swaggerUi.load();\n\n    function log() {\n      if ('console' in window) {\n        console.log.apply(console, arguments);\n      }\n    }\n  });", 
            "title": "/client/&lt;client_id&gt;/session"
        }, 
        {
            "location": "/api-issuer/", 
            "text": "Delete\n\n\nGet\n\n\nHead\n\n\nKey\n\n\n/key\n\n\n/key/1234\n\n\nLogin\n\n\nPost\n\n\nPut\n\n\nScope\n\n\n\n\n\n\n  \n\n    \n\n    \n\n  \n\n\n\n\n\n\n  $(function () {\n    var url = '/swagger/issuer.yaml';\n\n    window.swaggerUi = new SwaggerUi({\n      url: url,\n      dom_id: \"swagger-ui-container\",\n      supportedSubmitMethods: [],\n      onComplete: function(swaggerApi, swaggerUi){\n        $('#temp-anchor-links').remove();\n\n        $('body').scrollspy('refresh');\n\n        $('pre code').each(function(i, e) {\n          hljs.highlightBlock(e)\n        });\n\n        addApiKeyAuthorization();\n      },\n      onFailure: function(data) {\n        log(\"Unable to Load SwaggerUI\");\n      },\n      docExpansion: \"none\",\n      apisSorter: \"alpha\",\n      showRequestHeaders: false\n    });\n\n    function addApiKeyAuthorization(){\n      var key;\n      if ('authentiq' in window) {\n        key = window.authentiq.Token.getAuthorizationHeader();\n      }\n      // var key = encodeURIComponent($('#input_apiKey')[0].value);\n      if(key && key.trim() != \"\") {\n          var token = new SwaggerClient.ApiKeyAuthorization(\"Authorization\", key, \"header\");\n          window.swaggerUi.api.clientAuthorizations.add(\"access_token\", token);\n          log(\"added key \" + key);\n      }\n    }\n\n    window.swaggerUi.load();\n\n    function log() {\n      if ('console' in window) {\n        console.log.apply(console, arguments);\n      }\n    }\n  });", 
            "title": "Issuer"
        }, 
        {
            "location": "/api-issuer/#delete", 
            "text": "", 
            "title": "Delete"
        }, 
        {
            "location": "/api-issuer/#get", 
            "text": "", 
            "title": "Get"
        }, 
        {
            "location": "/api-issuer/#head", 
            "text": "", 
            "title": "Head"
        }, 
        {
            "location": "/api-issuer/#key", 
            "text": "", 
            "title": "Key"
        }, 
        {
            "location": "/api-issuer/#key_1", 
            "text": "", 
            "title": "/key"
        }, 
        {
            "location": "/api-issuer/#key1234", 
            "text": "", 
            "title": "/key/1234"
        }, 
        {
            "location": "/api-issuer/#login", 
            "text": "", 
            "title": "Login"
        }, 
        {
            "location": "/api-issuer/#post", 
            "text": "", 
            "title": "Post"
        }, 
        {
            "location": "/api-issuer/#put", 
            "text": "", 
            "title": "Put"
        }, 
        {
            "location": "/api-issuer/#scope", 
            "text": "$(function () {\n    var url = '/swagger/issuer.yaml';\n\n    window.swaggerUi = new SwaggerUi({\n      url: url,\n      dom_id: \"swagger-ui-container\",\n      supportedSubmitMethods: [],\n      onComplete: function(swaggerApi, swaggerUi){\n        $('#temp-anchor-links').remove();\n\n        $('body').scrollspy('refresh');\n\n        $('pre code').each(function(i, e) {\n          hljs.highlightBlock(e)\n        });\n\n        addApiKeyAuthorization();\n      },\n      onFailure: function(data) {\n        log(\"Unable to Load SwaggerUI\");\n      },\n      docExpansion: \"none\",\n      apisSorter: \"alpha\",\n      showRequestHeaders: false\n    });\n\n    function addApiKeyAuthorization(){\n      var key;\n      if ('authentiq' in window) {\n        key = window.authentiq.Token.getAuthorizationHeader();\n      }\n      // var key = encodeURIComponent($('#input_apiKey')[0].value);\n      if(key && key.trim() != \"\") {\n          var token = new SwaggerClient.ApiKeyAuthorization(\"Authorization\", key, \"header\");\n          window.swaggerUi.api.clientAuthorizations.add(\"access_token\", token);\n          log(\"added key \" + key);\n      }\n    }\n\n    window.swaggerUi.load();\n\n    function log() {\n      if ('console' in window) {\n        console.log.apply(console, arguments);\n      }\n    }\n  });", 
            "title": "Scope"
        }, 
        {
            "location": "/yourapps/", 
            "text": "", 
            "title": "Your Apps"
        }, 
        {
            "location": "/faq/", 
            "text": "Frequently Asked Questions\n\n\nSome answers to questions people have asked. Do you have a different question? Please \nget in touch with us\n.\n\n\nGeneral\n\n\nWhat is an Authentiq ID?\n\n\nWhen you download our app and create a profile, that is your very own Authentiq ID. Use it to sign into websites, or share your details in other ways.\n\n\nWhat is Authentiq Connect?\n\n\nAuthentiq Connect is the SDK you can use to let your users sign in to your stuff. On the server side it implements both the OAuth 2.0 and OpenID Connect protocols, giving developers the most flexible integration options. The AuthentiqJS snippet is basically an OIDC client, but specifically built for Authentiq.\n\n\nWhat is OpenID Connect?\n\n\nOpenID Connect 1.0\n is a set of extensions to OAuth 2.0, focusing on authentication as opposed to authorization. Many global players are backing OpenID Connect to authenticate users. OpenID Connect is technically very different from the older OpenID.\n\n\nWho signs the Authentiq ID claims?\n\n\nAt the moment we verify and sign the email and phone number claims when a user registers their Authentiq ID, so that you don\nt have to time and money doing your own email and SMS verification. At some point in the future we will open up our signing APIs to allow external signature providers to issue and sign additional claims, for instance an employee number, or a car registration.\n\n\nHow does \nOne-click sign in\n work?\n\n\nOne-click sign in\n allows end-users, on repeated visits, to sign in to your site by simply tapping a push notification instead of scanning a QR code. It works by setting a cookie that links the user\ns browser and their phone. \n\n\nTechnical\n\n\nCan I use AuthentiqJS with a server application?\n\n\nYes, even though the AuthentiqJS snippet is running in the user agent it supports the authorization code flow in two ways. First, you can let AuthentiqJS catch the authorization code from the Authentiq Provider via a fragment redirect and then POST it to your own server side resource. This method is great for \nhybrid\n apps where both the user agent and the server must be authenticated. Alternatively, you can point the redirect URL directly to a server-side resource, bypassing the snippet entirely upon authentication and following the traditional OAuth 2.0 code flow.\n\n\nCan I use Authentiq Connect with Framework X?\n\n\nIf your framework includes a decent OAuth 2.0 or OIDC client library, then most likely yes, out of the box (we\nd be super grateful if you can \ncontribute an example\n in this case!). If not, then you can use the AuthentiqJS snippet to initiate the \nOAuth dance\n and catch the user\ns profile via an \nevent listener\n in JavaScript. For server side applications you will need to code a HTTP endpoint that can validate the ID Token sent.\n\n\nSecurity\n\n\nHow does Authentiq encrypt my data on my phone?\n\n\nOn iOS, your Authentiq ID is automatically encrypted by the OS when the phone is locked, and decrypted when the phone is unlocked. For this reason it is important that the device has a passcode set, even though the Authentiq ID app itself can be protected with a PIN.\n\n\nHow does Authentiq encrypt my data in transit?\n\n\nAt registration time, your email and phone number are transmitted over TLS for verification purposes, but not persisted afterwards. When signing in to a website, your profile is transmitted over an TLS connection to the Authentiq Connect Provider, which in turn will send the profile data to the client, also using TLS. Our hosted provider currently has an A+ rating on \nSSL Labs\n.\n\n\nWhat data does the Authentiq Connect Provider persist?\n\n\nAs little as possible, although we \nare\n still working on the details at the moment. We are very privacy-aware ourselves and our goal is to avoid persisting any data when not needed, including metadata. Pretty soon we will offer a mode that supports end-to-end encryption between the phone and the client application. When used, the Authentiq Connect Provider will be unable to decrypt the ID Token that is transmitted and is merely acting as a gateway. When it\ns finalized, we\nll properly document it too.", 
            "title": "FAQs"
        }, 
        {
            "location": "/faq/#frequently-asked-questions", 
            "text": "Some answers to questions people have asked. Do you have a different question? Please  get in touch with us .", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/faq/#general", 
            "text": "What is an Authentiq ID?  When you download our app and create a profile, that is your very own Authentiq ID. Use it to sign into websites, or share your details in other ways.  What is Authentiq Connect?  Authentiq Connect is the SDK you can use to let your users sign in to your stuff. On the server side it implements both the OAuth 2.0 and OpenID Connect protocols, giving developers the most flexible integration options. The AuthentiqJS snippet is basically an OIDC client, but specifically built for Authentiq.  What is OpenID Connect?  OpenID Connect 1.0  is a set of extensions to OAuth 2.0, focusing on authentication as opposed to authorization. Many global players are backing OpenID Connect to authenticate users. OpenID Connect is technically very different from the older OpenID.  Who signs the Authentiq ID claims?  At the moment we verify and sign the email and phone number claims when a user registers their Authentiq ID, so that you don t have to time and money doing your own email and SMS verification. At some point in the future we will open up our signing APIs to allow external signature providers to issue and sign additional claims, for instance an employee number, or a car registration.  How does  One-click sign in  work?  One-click sign in  allows end-users, on repeated visits, to sign in to your site by simply tapping a push notification instead of scanning a QR code. It works by setting a cookie that links the user s browser and their phone.", 
            "title": "General"
        }, 
        {
            "location": "/faq/#technical", 
            "text": "Can I use AuthentiqJS with a server application?  Yes, even though the AuthentiqJS snippet is running in the user agent it supports the authorization code flow in two ways. First, you can let AuthentiqJS catch the authorization code from the Authentiq Provider via a fragment redirect and then POST it to your own server side resource. This method is great for  hybrid  apps where both the user agent and the server must be authenticated. Alternatively, you can point the redirect URL directly to a server-side resource, bypassing the snippet entirely upon authentication and following the traditional OAuth 2.0 code flow.  Can I use Authentiq Connect with Framework X?  If your framework includes a decent OAuth 2.0 or OIDC client library, then most likely yes, out of the box (we d be super grateful if you can  contribute an example  in this case!). If not, then you can use the AuthentiqJS snippet to initiate the  OAuth dance  and catch the user s profile via an  event listener  in JavaScript. For server side applications you will need to code a HTTP endpoint that can validate the ID Token sent.", 
            "title": "Technical"
        }, 
        {
            "location": "/faq/#security", 
            "text": "How does Authentiq encrypt my data on my phone?  On iOS, your Authentiq ID is automatically encrypted by the OS when the phone is locked, and decrypted when the phone is unlocked. For this reason it is important that the device has a passcode set, even though the Authentiq ID app itself can be protected with a PIN.  How does Authentiq encrypt my data in transit?  At registration time, your email and phone number are transmitted over TLS for verification purposes, but not persisted afterwards. When signing in to a website, your profile is transmitted over an TLS connection to the Authentiq Connect Provider, which in turn will send the profile data to the client, also using TLS. Our hosted provider currently has an A+ rating on  SSL Labs .  What data does the Authentiq Connect Provider persist?  As little as possible, although we  are  still working on the details at the moment. We are very privacy-aware ourselves and our goal is to avoid persisting any data when not needed, including metadata. Pretty soon we will offer a mode that supports end-to-end encryption between the phone and the client application. When used, the Authentiq Connect Provider will be unable to decrypt the ID Token that is transmitted and is merely acting as a gateway. When it s finalized, we ll properly document it too.", 
            "title": "Security"
        }
    ]
}